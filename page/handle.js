// Generated by CoffeeScript 1.6.1
var delay, disqus_js, get, log, pop, q;

log = function() {
  var _ref;
  return typeof console !== "undefined" && console !== null ? (_ref = console.log) != null ? typeof _ref.apply === "function" ? _ref.apply(console, arguments) : void 0 : void 0 : void 0;
};

delay = function(f, t) {
  return setTimeout(t, f);
};

q = function(query) {
  return document.querySelector(query);
};

disqus_js = "/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */\nvar disqus_shortname = 'jiyinyiyong';\n// required: replace example with your forum shortname\n\n/* * * DON'T EDIT BELOW THIS LINE * * */\n(function() {\n    var dsq = document.createElement('script');\n    dsq.type = 'text/javascript';\n    dsq.async = true;\n    dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';\n    if (document.getElementsByTagName('head')[0]) {\n      document.getElementsByTagName('body')[0].appendChild(dsq);\n    }\n})();";

pop = function() {
  return alert("alert called by event!");
};

get = function(path, call) {
  var req;
  req = new XMLHttpRequest;
  req.open("get", path);
  req.onload = call;
  return req.send();
};

window.onload2 = function() {
  var test;
  document.body.insertAdjacentHTML("beforeend", lilyturf.html(function() {
    return this.div({
      "class": "main-title"
    }, "Lilyturf is a template engine for CoffeeScript");
  }));
  document.body.insertAdjacentHTML("beforeend", lilyturf.html(function() {
    return this.div({
      "class": "method"
    }, this.p({
      "class": "bold"
    }, this.text("This is generated in HTML way")), this.p("This is my way generating HTML in the runtime of CoffeeScript."), this.p({}, "JavaScript is a language born to deal with HTML, and it should be."), this.p({}, this.text("So, let's generate HTML with CoffeeScript.")));
  }));
  document.body.appendChild(lilyturf.dom(function() {
    return this.div({
      "class": "method"
    }, this.p({
      "class": "bold"
    }, this.text("This is generated in DOM way")), this.p({
      id: "click",
      onclick: pop
    }, this.text("The DOM version allow click events, please click!")), this.p(this.text("Read the following files for more details.")), this.a({
      href: "https://github.com/jiyinyiyong/lilyturf"
    }, "And here's the link to it's repo."));
  }));
  document.body.appendChild(lilyturf.dom(function() {
    return this.div({
      id: "code"
    });
  }));
  get("../src/lilyturf.coffee", function(res) {
    return (q("#code")).insertAdjacentHTML("beforeend", lilyturf.html(function() {
      return this.div({}, this.div({
        "class": "intro"
      }, this.text("This is the code implementing Lilyturf:")), this.pre({
        id: "source"
      }, this.code({
        "class": "coffeescript"
      }, this.html(res.target.response))));
    }));
  });
  get("../src/handle.coffee", function(res) {
    return (q("#code")).appendChild(lilyturf.dom(function() {
      return this.div({}, this.div({
        "class": "intro:"
      }, this.text("And my code for generating this page:")), this.pre({}, this.code({
        "class": "coffeescript"
      }, this.text(res.target.response))));
    }));
  });
  get("../src/index.jade", function(res) {
    return (q("#code")).appendChild(lilyturf.dom(function() {
      return this.div({}, this.div({
        "class": "intro:"
      }, "This is the source of HTML page in Jade:"), this.pre({}, this.code({
        "class": "jade"
      }, this.text(res.target.response))));
    }));
  });
  get("../readme.md", function(res) {
    return (q("#code")).appendChild(lilyturf.dom(function() {
      return this.div({}, this.div({
        "class": "intro"
      }, this.text("The readme file:")), this.pre({
        id: "readme"
      }, res.target.response));
    }));
  });
  document.body.appendChild(lilyturf.dom(function() {
    return this.div({
      id: "disqus_thread"
    }, this.script({
      type: "text/javascript"
    }, disqus_js), this.a({
      href: "http://disqus.com",
      "class": "dsq-brlink"
    }, this.text("comments powered by"), this.span({
      "class": "logo-disqus"
    }, "Disqus")));
  }));
  return (test = function() {
    var data, item, key, lily, _results;
    lily = lilyturf;
    log = function() {
      return console.log.apply(console, arguments);
    };
    data = {
      1: function() {
        return this.div("test");
      },
      2: function() {
        return "string";
      },
      3: function() {
        return this.div({}, "code");
      },
      4: function() {
        return this.div({
          id: "name"
        }, "code");
      },
      5: function() {
        return this.div({}, true ? this.div("yes") : void 0, false ? this.div("no") : void 0);
      },
      6: function() {
        var i;
        return this.div({}, (function() {
          var _i, _len, _ref, _results;
          _ref = [1, 2, 3, 4];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            _results.push(this.div("item " + i));
          }
          return _results;
        }).call(this), {
          "class": "for loop"
        }, void 0);
      },
      7: function() {
        var i;
        return this.div({}, (function() {
          var _i, _len, _ref, _results;
          _ref = [1, 2, 3, 4];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            _results.push(this.div(i));
          }
          return _results;
        }).call(this));
      }
    };
    _results = [];
    for (key in data) {
      item = data[key];
      log(lily.dom(item));
      _results.push(log(lily.html(item)));
    }
    return _results;
  })();
};

window.onload = function() {
  log("%%%%%%%%%%%%% test css %%%%%%%%%%%%");
  return log(lilyturf.css(function() {
    return {
      selector: {
        attribute: "value",
        nest: {
          nest_attribute: "nest_value",
          color: this.hsl(1, 2, 3)
        }
      }
    };
  }));
};
