// Generated by CoffeeScript 1.5.0
var __slice = [].slice;

(function() {
  var lilyturf;
  lilyturf = {
    pair_elems: "head title body script      div nav header footer section article      p span textarea br pre code a address b backquote      button font frame form hr i      ul li ol table tr td th title      canvas audio video select style".split(/\s+/),
    single_elems: "img meta input link iframe audio video".split(/\s+/),
    html_way: {
      attrs: function(obj) {
        var attrs, key, value;
        attrs = "";
        for (key in obj) {
          value = obj[key];
          attrs += " " + key + "='" + value + "'";
        }
        return attrs;
      },
      text: function(text) {
        return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\s/g, "&nbsp;");
      },
      html: function(html) {
        return html;
      }
    },
    dom_way: {
      attrs: function(obj, elem) {
        var key, value;
        for (key in obj) {
          value = obj[key];
          if (key.slice(0, 2) === "on") {
            elem[key] = value;
          } else {
            elem.setAttribute(key, value);
          }
        }
        return elem;
      },
      text: function(text) {
        return document.createTextNode(text);
      },
      html: function(html) {
        var div;
        div = document.createElement("div");
        div.innerHTML = html;
        return div;
      }
    },
    resolve: function(list) {
      var elem, obj;
      obj = {};
      elem = [];
      list.forEach(function(item) {
        var key, that, value, _i, _len, _results, _results1;
        if (item != null) {
          if (item.__proto__ === Object.prototype) {
            _results = [];
            for (key in item) {
              value = item[key];
              _results.push(obj[key] = value);
            }
            return _results;
          } else if (item.__proto__ === Array.prototype) {
            _results1 = [];
            for (_i = 0, _len = item.length; _i < _len; _i++) {
              that = item[_i];
              _results1.push(elem.push(that));
            }
            return _results1;
          } else {
            return elem.push(item);
          }
        }
      });
      return [obj, elem];
    },
    prepare_html: function() {
      var resolve, self;
      self = this.html_way;
      resolve = this.resolve;
      this.pair_elems.map(function(tag) {
        return self[tag] = function() {
          var list, obj, _ref;
          list = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _ref = resolve(list), obj = _ref[0], list = _ref[1];
          return "<" + tag + (self.attrs(obj)) + ">" + (list.join("")) + "</" + tag + ">";
        };
      });
      return this.single_elems.map(function(tag) {
        return self[tag] = function(obj) {
          if (obj == null) {
            obj = {};
          }
          return "<" + tag + (self.attrs(obj)) + "/>";
        };
      });
    },
    prepare_dom: function() {
      var all, resolve, self;
      self = this.dom_way;
      resolve = this.resolve;
      all = this.pair_elems.concat(this.single_elems);
      return all.map(function(tag) {
        return self[tag] = function() {
          var elem, list, obj, _ref;
          list = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _ref = resolve(list), obj = _ref[0], list = _ref[1];
          elem = document.createElement(tag);
          self.attrs(obj, elem);
          list.forEach(function(child) {
            var _ref1;
            if (child != null) {
              if ((_ref1 = typeof child) === 'string' || _ref1 === "number") {
                return elem.appendChild(self.text(child));
              } else {
                return elem.appendChild(child);
              }
            }
          });
          return elem;
        };
      });
    },
    html: function(f) {
      var self;
      self = this.html_way;
      self.f = f;
      return self.f();
    },
    dom: function(f) {
      var self;
      self = this.dom_way;
      self.f = f;
      return self.f();
    }
  };
  lilyturf.prepare_html();
  if ((typeof window !== "undefined" && window !== null ? window.document : void 0) != null) {
    lilyturf.prepare_dom();
  }
  if (typeof exports !== "undefined" && exports !== null) {
    return exports.lilyturf = lilyturf;
  } else {
    return window.lilyturf = lilyturf;
  }
})();
