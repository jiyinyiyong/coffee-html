// Generated by CoffeeScript 1.4.0
var lilyturf,
  __slice = [].slice;

lilyturf = {
  pair_elems: "head title body script    div nav header footer section article    p span textarea br pre code a address b backquote    button font frame form hr i    ul li ol table tr td th title    canvas audio video select style".split(/\s+/),
  single_elems: "img meta input link iframe audio video".split(/\s+/),
  html_way: {
    attrs: function(obj) {
      var attrs, key, value;
      attrs = "";
      for (key in obj) {
        value = obj[key];
        attrs += " " + key + "='" + value + "'";
      }
      return attrs;
    },
    text: function(text) {
      return text;
    },
    html: function(html) {
      return html;
    }
  },
  dom_way: {
    attrs: function(obj, elem) {
      var key, value;
      for (key in obj) {
        value = obj[key];
        if (key.slice(0, 2) === "on") {
          elem[key] = value;
        } else {
          elem.setAttribute(key, value);
        }
      }
      return elem;
    },
    text: function(text) {
      return document.createTextNode(text);
    },
    html: function(html) {
      var div;
      div = document.createElement("div");
      div.innerHTML = html;
      return div;
    }
  },
  prepare_html: function() {
    var self;
    self = this.html_way;
    this.pair_elems.map(function(tag) {
      return self[tag] = function() {
        var list, obj;
        obj = arguments[0], list = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return "<" + tag + (self.attrs(obj)) + ">" + (list.join("")) + "</" + tag + ">";
      };
    });
    return this.single_elems.map(function(tag) {
      return self[tag] = function() {
        var list, obj;
        obj = arguments[0], list = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return "<" + tag + (self.attrs(obj)) + "/>";
      };
    });
  },
  prepare_dom: function() {
    var all, self;
    self = this.dom_way;
    all = this.pair_elems.concat(this.single_elems);
    return all.map(function(tag) {
      return self[tag] = function() {
        var elem, list, obj;
        obj = arguments[0], list = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        elem = document.createElement(tag);
        self.attrs(obj, elem);
        list.forEach(function(child) {
          return elem.appendChild(child);
        });
        return elem;
      };
    });
  },
  html: function(f) {
    var self;
    self = this.html_way;
    self.f = f;
    return self.f();
  },
  dom: function(f) {
    var self;
    self = this.dom_way;
    self.f = f;
    return self.f();
  }
};

lilyturf.prepare_html();

if (typeof document !== "undefined" && document !== null) {
  lilyturf.prepare_dom();
}
